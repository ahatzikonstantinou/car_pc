#!/usr/bin/python
# -*- coding: utf-8 -*-

import wx
from threading import *
from WScanner import *
from DummyScanner import * #for debugging

class ScanStationsDialog( wx.Dialog ):
	def __init__( self, parent, title, stations = {} ):
		super(ScanStationsDialog, self).__init__(parent=parent, title=title, size=(450, 150), style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER )
			
		self.stations = stations
		
		panel = wx.Panel(self)
		vbox = wx.BoxSizer(wx.VERTICAL)
			
		dataSizer = wx.FlexGridSizer( 3, 1 )
		warningST = wx.StaticText( panel, label='WARNING:' )
		
		bmp = wx.ArtProvider.GetBitmap(wx.ART_WARNING, wx.ART_OTHER, (16, 16))
		warningIco = wx.StaticBitmap(panel, wx.ID_ANY, bmp)
		f = warningST.GetFont()
		f.SetWeight(wx.BOLD)
		warningST.SetFont(f) 
		warningSizer = wx.BoxSizer( wx.HORIZONTAL )
		warningSizer.Add( warningIco, 0, wx.ALL, 5 )
		warningSizer.Add( warningST, 0, wx.ALL, 5 )

		dataSizer.AddMany([
			warningSizer,
			wx.StaticText( panel, label='"Merge" will merge the existing list of stations with the list generated by scan.' ),
            wx.StaticText( panel, label='"Replace" will REPLACE the existing list of stations with the list generated by scan.' )
			])
			
		dataSizer.AddGrowableCol(1, 1)
		panel.SetSizer( dataSizer )
			
		hbox2 = wx.BoxSizer(wx.HORIZONTAL)
		mergeButton = wx.Button(self, wx.ID_ANY, 'Merge')
		replaceButton = wx.Button(self, wx.ID_ANY, 'Replace')
		closeButton = wx.Button(self, wx.ID_CANCEL, '')
		hbox2.Add(mergeButton)
		hbox2.Add(replaceButton)
		hbox2.Add(closeButton)

		vbox.Add(panel, proportion=1, flag=wx.ALL|wx.EXPAND, border=5)
		vbox.Add(hbox2, flag= wx.ALIGN_CENTER|wx.TOP|wx.BOTTOM, border=10)

		self.SetSizer(vbox)

		mergeButton.Bind(wx.EVT_BUTTON, self.OnMerge)
		replaceButton.Bind(wx.EVT_BUTTON, self.OnReplace)
		closeButton.Bind(wx.EVT_BUTTON, self.OnClose)
		
		self.SetDefaultItem( mergeButton )

	def OnMerge( self,e ):
		scanDialog = ScannerProgressDialog( self, 'Scanning', True, self.stations )
		if( scanDialog.ShowModal() == wx.ID_OK ):
			self.stations = scanDialog.stations
			self.EndModal(wx.ID_OK)
				
	def OnReplace(self, e):
		confirmDlg = wx.MessageDialog(self, 'You are about to replace the current list of stations with the one that will be generated by scan. Are you sure you want to continue?',
				'Warning', wx.YES_NO | wx.YES_DEFAULT | wx.ICON_WARNING )
		if( confirmDlg.ShowModal() == wx.ID_YES ):
			scanDialog = ScannerProgressDialog( self, 'Scanning', False, self.stations )
			if( scanDialog.ShowModal() == wx.ID_OK ):
				self.stations = scanDialog.stations
				self.EndModal(wx.ID_OK)

	def OnClose(self, e):
		self.Destroy()

class ScannerProgressDialog( wx.Dialog ):
	def __init__( self, parent, title, mergeTrueReplaceFalse = True, stations = {} ):
		super(ScannerProgressDialog, self).__init__(parent=parent, title=title, size=(250, 300), style=wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER)
		self.merge = mergeTrueReplaceFalse
		self.stations = stations
		#panel = wx.Panel(self)
		#self.progressLabel = wx.StaticText( self, label='Progress:' )
		self.gauge = wx.Gauge(self, range=100, size=(-1,30) )

		self.stationsList = wx.TextCtrl( self, style=wx.TE_READONLY|wx.TE_MULTILINE )
		self.stationsList.AppendText( 'Test1\n' )
		self.stationsList.AppendText( 'Test2' )

		self.saveButton = wx.Button(self, wx.ID_SAVE, ( 'Merge' if self.merge else 'Replace' ) )
		cancelButton = wx.Button(self, wx.ID_CANCEL, '')

		vbox = wx.BoxSizer(wx.VERTICAL)
		progressSizer = wx.BoxSizer( wx.HORIZONTAL )
		hbox2 = wx.StdDialogButtonSizer()

		#progressSizer.Add( self.progressLabel, 0, wx.ALL | wx.EXPAND, 10 )
		progressSizer.Add( self.gauge, 1, wx.ALL | wx.EXPAND, 0 )

		hbox2.AddButton( cancelButton )
		hbox2.AddButton( self.saveButton )
		hbox2.SetAffirmativeButton( self.saveButton )
		hbox2.SetCancelButton(cancelButton)
		hbox2.Realize()

		#vbox.Add(panel, 1, flag=wx.ALL|wx.EXPAND, border=5)
		vbox.Add(progressSizer, 0, wx.ALL | wx.EXPAND, 10)
		vbox.Add(self.stationsList, 1, wx.ALL | wx.EXPAND, 10)
		vbox.Add(hbox2, flag= wx.ALIGN_CENTER|wx.TOP|wx.BOTTOM, border=10)

		self.SetSizer(vbox)

		self.saveButton.Bind( wx.EVT_BUTTON, self.OnSave )
		cancelButton.Bind(wx.EVT_BUTTON, self.OnCancel)
		
		# Set up event handler for any worker thread results
		EVT_PROGRESS(self,self.OnScanProgress)
		EVT_COMPLETE(self,self.OnScanComplete)
		
		# And start a worker thread yet
		self.worker = WorkerThread(self, self.stations, self.merge )
		self.saveButton.Disable()

	def OnSave( self, e):
		self.EndModal( wx.ID_OK )

	def OnCancel(self, e):
		# Flag the worker thread to stop if running
		if self.worker:
			self.worker.abort()
		self.Destroy()
		
	def OnScanProgress( self, e ):
		if( e.data is None or e.finished ):
			# Thread aborted (using our convention of None return or finished normally)
			pass
		else:
			#update the progress bar and the list of stations
			if( e.data.progressPercent < 100 ):
				title = '{0}% {1}'.format( e.data.progressPercent, e.data.message ) 
			else:
				title = e.data.message
			self.SetTitle( title )
			self.gauge.SetValue( e.data.progressPercent )
			#print( 'Scan reports: {0}%, status:{1}, message:{2}'.format( 
				#e.data.progressPercent, e.data.status, e.data.message ) )
				
	def OnScanComplete( self, e ):
		self.SetTitle( 'Finished' )
		self.gauge.SetValue( 100 )
		self.stationsList.Clear()
		names = []
		for ch in e.channels.values():
			names.append( ch.name )
		self.stationsList.AppendText( '\n'.join( names ) )
		self.stations = e.channels
		self.saveButton.Enable()
		
# Define notification event for thread progressupdate and completion
EVT_PROGRESS_ID = wx.NewId()
EVT_COMPLETE_ID = wx.NewId()

def EVT_PROGRESS(win, func):
	"""Define Progress Event."""
	win.Connect(-1, -1, EVT_PROGRESS_ID, func)

def EVT_COMPLETE(win, func):
	"""Define Complete Event."""
	win.Connect(-1, -1, EVT_COMPLETE_ID, func)

class ProgressEvent(wx.PyEvent):
	"""Simple event to carry arbitrary result data."""
	def __init__(self, callbackData, finished = False):
		"""Init Complete Event."""
		wx.PyEvent.__init__(self)
		self.SetEventType(EVT_PROGRESS_ID)
		self.data = callbackData
		self.finished = finished

class CompleteEvent( wx.PyEvent ):
	def __init__( self, channels ):
		"""Init Complete Event."""
		wx.PyEvent.__init__(self)
		self.SetEventType(EVT_COMPLETE_ID)
		self.channels = channels


# Thread class that executes processing
# If you're concerned with hanging on an exit if your thread
# doesn't terminate for some reason, just add a "self.setDaemon(1)" to
# the init and Python won't wait for it to terminate.
class WorkerThread(Thread):
	"""Worker Thread Class."""
	def __init__(self, notify_window, stations = {}, mergeTrueReplaceFalse = True):
		"""Init Worker Thread Class."""
		Thread.__init__(self)
		self._notify_window = notify_window
		self.stations = stations		
		#print( 'Starting with stations:' )
		#for st in self.stations.values():
			#st.Dump()
		self.merge = mergeTrueReplaceFalse
		self._want_abort = False
		self.setDaemon(1)
		# This starts the thread running on creation, but you could
		# also make the GUI thread responsible for calling this
		self.start()

	def run(self):
		"""Run Worker Thread."""
		# This is the long process code executing in the new thread
		# you will need to structure your processing so that you periodically
		# peek at the abort variable. This is done in this example in Callback
		
		self.digitalScanner = DummyScanner( callbackFunction = self.Callback, channels = self.stations )
		self.digitalScanner.Scan( self.merge )
		# Here's where the result is returned
		if( not self._want_abort ):
			#print( 'Returning stations:' )
			#for st in self.digitalScanner.channels.values():
				#st.Dump()
			wx.PostEvent( self._notify_window, CompleteEvent( self.digitalScanner.channels ) )

	def Callback( self, callbackData ):
		#print( 'Thread gets callbackData: {0}%, status:{1}, message:{2}'.format( 
			#callbackData.progressPercent, callbackData.status, callbackData.message ) )
		if self._want_abort:
			# Use a result of None to acknowledge the abort (of
			# course you can use whatever you'd like or even
			# a separate event type)
			#wx.PostEvent(self._notify_window, CompleteEvent(None))
			self.digitalScanner.StopScan()
		else:
			wx.PostEvent( self._notify_window, ProgressEvent( callbackData ) )
		
	def abort(self):
		"""abort worker thread."""
		# Method for use by main thread to signal an abort
		self._want_abort = True
        
if __name__ == '__main__':
	app = wx.App()
	app.MainLoop()
	dlg = ScanStationsDialog( None, 'Scan Stations Test' )
	dlg.ShowModal()
